<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <% include meta%>
    <style>

    </style>
</head>
<body>
<% include header %>
<div class="vm">
    {{name}}
    <button v-tap="tapTest">点击</button>
</div>
<script src="/javascripts/common/vue.min.js"></script>
<script>
    new Vue({
        el: '.vm',
        data: {
            name: 'hhhh'
        },
        methods: {
            tapTest:function(){
                alert(444);
            }
        },
        directives:{
            tap:{
                isFn : true,
                acceptStatement : true,
                bind : function() {
                    //bind callback
                },
                update : function(fn) {
                    var self = this;
                    self.tapObj = {};

                    if(typeof fn !== 'function') {
                        return console.error('The param of directive "v-tap" must be a function!');
                    }
                    self.handler = function(e) { //This directive.handler
                        e.tapObj = self.tapObj;
                        fn.call(self,e);
                    };
                    if(self.isPC()) {
                        self.el.addEventListener('click',function(e) {
                            e.preventDefault();
                            fn.call(self,e);
                        },false);
                    } else {
                        this.el.addEventListener('touchstart',function(e) {

                            if(self.modifiers.stop)
                                e.stopPropagation();
                            if(self.modifiers.prevent)
                                e.preventDefault();
                            self.touchstart(e,self);
                        },false);
                        this.el.addEventListener('touchend',function(e) {
                            Object.defineProperties(e, { // 重写currentTarget对象 与jq相同
                                "currentTarget": {
                                    value : self.el,
                                    writable: true,
                                    enumerable: true,
                                    configurable: true
                                },
                            });
                            e.preventDefault();
                            if(!self.modifiers.prevent && self.el.tagName.toLocaleLowerCase() === 'a' && self.el.href) {
                                return window.location = self.el.href;
                            }
                            return self.touchend(e,self,fn);
                        },false);
                    }
                },
                unbind : function() {},
                isTap : function() {
                    var self   = this;
                    if(self.el.disabled){
                        return false;
                    }
                    var tapObj = this.tapObj;
                    return this.time < 150 && Math.abs(tapObj.distanceX) < 2 && Math.abs(tapObj.distanceY) < 2;
                },
                isPC : function() {
                    var uaInfo = navigator.userAgent;
                    var agents = ["Android", "iPhone", "Windows Phone", "iPad", "iPod"];
                    var flag = true;
                    for (var i = 0; i < agents.length; i++) {
                        if (uaInfo.indexOf(agents[i]) > 0) { flag = false; break; }
                    }
                    return flag;
                },
                touchstart : function(e,self) {
                    var touches = e.touches[0];
                    var tapObj = self.tapObj;
                    tapObj.pageX = touches.pageX;
                    tapObj.pageY = touches.pageY;
                    tapObj.clientX = touches.clientX;
                    tapObj.clientY = touches.clientY;
                    self.time = +new Date();
                },
                touchend : function(e,self) {
                    var touches = e.changedTouches[0];
                    var tapObj = self.tapObj;
                    self.time = +new Date() - self.time;
                    tapObj.distanceX = tapObj.pageX - touches.pageX;
                    tapObj.distanceY = tapObj.pageY - touches.pageY;

                    if (!self.isTap(tapObj)) return;
                    setTimeout(function() {
                        self.handler(e);
                    },150)
                }
            }
        }
    })
</script>
</body>
</html>
